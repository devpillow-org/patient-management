{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dev Pillow Corp","text":"<p>Empresa que age como uma software house, buscando a satisfa\u00e7\u00e3o do cliente por meio da aplica\u00e7\u00e3o de engenharia de software, metodologias \u00e1geis e o uso do Design e valida\u00e7\u00e3o como nortes.</p>"},{"location":"about/","title":"Dev Pillow Corp","text":"<p>Empresa que age como uma software house, buscando a satisfa\u00e7\u00e3o do cliente por meio da aplica\u00e7\u00e3o de engenharia de software, metodologias \u00e1geis e o uso do Design e valida\u00e7\u00e3o como nortes.</p>"},{"location":"_posts/2024-08-14-welcome-to-jekyll/","title":"Welcome to Jekyll!","text":"<p>You\u2019ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p> <p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p> <p>Jekyll also offers powerful support for code snippets:</p> <p>{% highlight ruby %} def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom')</p>"},{"location":"_posts/2024-08-14-welcome-to-jekyll/#prints-hi-tom-to-stdout","title":"=&gt; prints 'Hi, Tom' to STDOUT.","text":"<p>{% endhighlight %}</p> <p>Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll\u2019s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</p>"},{"location":"projects/patient-management/","title":"About project","text":"<p>O Projeto consistir\u00e1 em um sofware gerenciador de ciclo de vida de um paciente dentro de um consult\u00f3rio, envolvendo todas as etapas de uma atendimento, incluindo o in\u00edcio e encerramento do mesmo. </p> <p>O software ter\u00e1 como agentes o paciente, o(a) recepcionista, o(a) m\u00e9dico(a) e  o(a) administrador(a).</p>"},{"location":"projects/patient-management/#engenharia-de-requisitos","title":"Engenharia de requisitos","text":"<p>O presente documento busca , atraves do uso de engenharia de software, em espec\u00edfico com o uso de engenharia de requisitos, elicitar as funcionalidades a serem desenvolvidas no sistema. </p> <p>Ao final do presente documento teremos uma vis\u00e3o hol\u00edstica de todo o sistema a ser envolvido, finalizando com uma representa\u00e7\u00e3o do mesmo por meio de um design de alta fidelidade.</p>"},{"location":"projects/patient-management/#diagrama-sequencial-solto","title":"Diagrama sequencial solto","text":"<p>Essa diagrama\u00e7\u00e3o foi desenvolvida de maneira livre, com o intuido de representar poss\u00edveis a\u00e7\u00f5es gerais do sistema. </p> <p></p>"},{"location":"projects/patient-management/#diagrama-er","title":"Diagrama ER","text":"<p>O diagrama de entidade-relacionamento representa, por meio de uma abordagem orientada a entidades, os relacionamentos e intera\u00e7\u00f5es entre essas. </p> <p></p>"},{"location":"projects/patient-management/#diagramas-de-casos-de-uso","title":"Diagramas de Casos de uso","text":"<p>Um diagrama de caso de uso representa uma funcionalidade espec\u00edfica do sistema, mostrando as possibilidades de a\u00e7\u00f5es de maneira sequencial. </p>"},{"location":"projects/patient-management/#uc1-doctor-flow","title":"UC1 \u2013 Doctor Flow","text":""},{"location":"projects/patient-management/#uc2-receptionist-flow","title":"UC2 \u2013 Receptionist Flow","text":""},{"location":"projects/patient-management/#uc3-administrador-flow","title":"UC3 \u2013 Administrador Flow","text":""}]}